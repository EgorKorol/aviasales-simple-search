{"version":3,"sources":["assets/logo.svg","components/atoms/Checkbox/Checkbox.tsx","components/atoms/Loader/Loader.tsx","components/atoms/SwitchButton/SwitchButton.tsx","helpers/ticket.ts","helpers/time.ts","helpers/sorting.ts","components/atoms/Ticket/Ticket.tsx","components/atoms/TicketsMessageTemplate/TicketsMessageTemplate.tsx","components/molecules/FilterStops/FilterStops.tsx","components/molecules/FilterWrapper/FilterWrapper.tsx","components/molecules/SwitchTicketTypes/SwitchTicketTypes.tsx","components/molecules/SwitchWrapper/SwitchWrapper.tsx","components/molecules/TicketsList/TicketsList.tsx","api/tickets.ts","constants/index.ts","components/organisms/App/App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Checkbox","label","checked","disabled","value","onChange","className","type","Loader","color","width","height","viewBox","xmlns","stroke","fill","fillRule","transform","strokeWidth","cx","cy","r","attributeName","begin","dur","values","calcMode","repeatCount","from","to","SwitchButton","name","getNumberOfTransfers","stops","length","getTransfers","join","durationConvert","mins","hours","floorHours","Math","floor","minutes","roundMinutes","round","timeConvert","secondsFrom","secondsTo","timeFrom","Date","toTimeString","split","splice","timeTo","stopsSort","tickets","stopsNumber","filter","segments","every","Ticket","price","carrier","toString","replace","src","loading","aria-hidden","alt","destination","origin","parse","date","duration","TicketsMessageTemplate","text","buttonText","onClick","FilterStops","checkboxes","onChangeStops","onChangeHandler","title","map","key","FilterWrapper","children","SwitchTicketTypes","switchButtons","onChangeType","a11yLegend","SwitchWrapper","TicketsList","props","isLoading","isError","allTicketsLength","onClearFilters","onRepeatSearch","slice","index","getTicketsView","axiosRetry","axios","retries","StopFilters","TypeFilters","stopFilters","All","Empty","One","Two","Three","typeFilters","Cheap","Fast","App","setStopFilters","isAllChecked","state","updatedStopsFilterData","item","setState","updateTicketsByStopsFilter","newStopsFilterData","selectDeselectAllStopsFilters","setTypeFilters","updatedTypeFilters","updateTicketsByTypesFilter","repeatLastSearch","isTicketsError","isTicketsLoading","getTicketsWithSearchId","searchId","clearFilters","filteredTickets","this","getTicketsWithoutSearchId","get","then","data","catch","error","setTicketsLoadError","apiGetTickets","stop","console","allFilterIndex","findIndex","isImplicitSelectionOfEverything","updatedTickets","forEach","handleChangeStop","typesFilterData","handleChangeType","cheapTickets","sort","a","b","fastTickets","reduce","acc","durationSort","logo","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c0ab14d7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.0c089234.svg\";","import React from 'react';\n\nimport './Checkbox.css';\nimport { StopFilters } from '../../../constants';\n\nexport interface ICheckbox {\n  label: string;\n  checked: boolean;\n  value: StopFilters;\n  disabled?: boolean;\n}\n\ntype IProps = ICheckbox & {\n  onChange: (value: StopFilters) => void;\n};\n\nexport const Checkbox: React.FC<IProps> = ({ label, checked, disabled, value, onChange }) => {\n  const onChangeHandler = () => {\n    onChange(value);\n  };\n\n  return (\n    <label className=\"checkbox\">\n      <input\n        className=\"visually-hidden checkbox__input\"\n        type=\"checkbox\"\n        value={value}\n        checked={checked}\n        disabled={disabled}\n        onChange={onChangeHandler}\n      />\n      <span className=\"checkbox__box\" />\n      {label}\n    </label>\n  );\n};\n","import React from 'react';\n\nimport './Loader.css';\n\ninterface IProps {\n  color?: string;\n}\n\nexport const Loader: React.FC<IProps> = ({ color = '#2196F3' }) => {\n  return (\n    <svg className=\"loader\" width=\"57\" height=\"57\" viewBox=\"0 0 57 57\" xmlns=\"http://www.w3.org/2000/svg\" stroke={color}>\n      <g fill=\"none\" fillRule=\"evenodd\">\n        <g transform=\"translate(1 1)\" strokeWidth=\"2\">\n          <circle cx=\"5\" cy=\"50\" r=\"5\">\n            <animate\n              attributeName=\"cy\"\n              begin=\"0s\" dur=\"2.2s\"\n              values=\"50;5;50;50\"\n              calcMode=\"linear\"\n              repeatCount=\"indefinite\" />\n            <animate\n              attributeName=\"cx\"\n              begin=\"0s\" dur=\"2.2s\"\n              values=\"5;27;49;5\"\n              calcMode=\"linear\"\n              repeatCount=\"indefinite\" />\n          </circle>\n          <circle cx=\"27\" cy=\"5\" r=\"5\">\n            <animate\n              attributeName=\"cy\"\n              begin=\"0s\" dur=\"2.2s\"\n              from=\"5\" to=\"5\"\n              values=\"5;50;50;5\"\n              calcMode=\"linear\"\n              repeatCount=\"indefinite\" />\n            <animate\n              attributeName=\"cx\"\n              begin=\"0s\" dur=\"2.2s\"\n              from=\"27\" to=\"27\"\n              values=\"27;49;5;27\"\n              calcMode=\"linear\"\n              repeatCount=\"indefinite\" />\n          </circle>\n          <circle cx=\"49\" cy=\"50\" r=\"5\">\n            <animate\n              attributeName=\"cy\"\n              begin=\"0s\" dur=\"2.2s\"\n              values=\"50;50;5;50\"\n              calcMode=\"linear\"\n              repeatCount=\"indefinite\" />\n            <animate\n              attributeName=\"cx\"\n              from=\"49\" to=\"49\"\n              begin=\"0s\" dur=\"2.2s\"\n              values=\"49;5;27;49\"\n              calcMode=\"linear\"\n              repeatCount=\"indefinite\" />\n          </circle>\n        </g>\n      </g>\n    </svg>\n  );\n};\n","import React from 'react';\n\nimport './SwitchButton.css';\nimport { TypeFilters } from '../../../constants';\n\nexport interface ISwitchButton {\n  label: string;\n  checked: boolean;\n  value: TypeFilters;\n  name: string;\n  disabled?: boolean;\n}\n\ntype IProps = ISwitchButton & {\n  onChange: (value: TypeFilters) => void;\n};\n\nexport const SwitchButton: React.FC<IProps> = ({ label, checked, disabled, value, name, onChange }) => {\n  const onChangeHandler = () => {\n    onChange(value);\n  };\n\n  return (\n    <label className=\"switch-button text-uppercase font-weight-600\">\n      <input\n        className=\"visually-hidden switch-button__input\"\n        type=\"radio\"\n        name={name}\n        value={value}\n        checked={checked}\n        disabled={disabled}\n        onChange={onChangeHandler}\n      />\n      <div className=\"switch-button__button\">{label}</div>\n    </label>\n  );\n};\n","export const getNumberOfTransfers = (stops: string[]): string => {\n  if (!stops.length) {\n    return 'Без пересадок';\n  }\n\n  if (stops.length === 1) {\n    return '1 пересадка';\n  }\n\n  if (stops.length > 1 && stops.length < 5) {\n    return `${stops.length} пересадки`;\n  }\n\n  return `${stops.length} пересадок`;\n};\n\nexport const getTransfers = (stops: string[]): string => {\n  return stops.length\n    ? stops.join(', ')\n    : '–';\n};\n","export const durationConvert = (mins: number): string => {\n  const hours = (mins / 60);\n  const floorHours = Math.floor(hours);\n  const minutes = (hours - floorHours) * 60;\n  const roundMinutes = Math.round(minutes);\n\n  return `${floorHours}ч ${roundMinutes}м`;\n};\n\nexport const timeConvert = (secondsFrom: number, secondsTo: number): string => {\n  const dateFrom = new Date(secondsFrom);\n  const timeFrom = dateFrom.toTimeString().split(' ')[0].split(':').splice(0, 2).join(':');\n  const dateTo = new Date(secondsFrom + secondsTo);\n  const timeTo = dateTo.toTimeString().split(' ')[0].split(':').splice(0, 2).join(':');\n\n  return `${timeFrom} – ${timeTo}`;\n};\n","import { ITicket } from './../components/atoms/Ticket/Ticket';\n\nexport const priceSort = (tickets: ITicket[]): ITicket[] => {\n  return tickets.sort((a, b) => a.price - b.price);\n};\n\nexport const durationSort = (tickets: ITicket[]): ITicket[] => {\n  return tickets.sort((a, b) => {\n    const aDuration = a.segments.reduce((acc, { duration }) => acc + duration, 0);\n    const bDuration = b.segments.reduce((acc, { duration }) => acc + duration, 0);\n\n    return aDuration - bDuration;\n  });\n};\n\nexport const stopsSort = (tickets: ITicket[], stopsNumber: number): ITicket[] => {\n  return tickets.filter(({ segments }) => segments.every(({ stops }) => stops.length === stopsNumber));\n};\n","import React from 'react';\n\nimport './Ticket.css';\nimport { durationConvert, timeConvert, getNumberOfTransfers, getTransfers } from '../../../helpers';\n\nexport interface ITicket {\n  price: number;\n  carrier: string;\n  segments: ISegment[];\n}\n\ninterface ISegment {\n  origin: string;\n  destination: string;\n  date: string;\n  stops: string[];\n  duration: number;\n}\n\ntype IProps = ITicket;\n\nexport const Ticket: React.FC<IProps> = ({ price, carrier, segments }) => {\n  const [from, to] = segments;\n\n  return (\n    <div className=\"ticket card\">\n      <div className=\"ticket__header\">\n        <p\n          className=\"ticket__price color-blue font-weight-600\"\n        >\n          {price.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \" \")} Р\n        </p>\n        {\n          // @ts-ignore\n          <img\n            src={`http://pics.avs.io/99/36/${carrier}@2x.png`}\n            loading=\"lazy\"\n            width=\"110\"\n            aria-hidden=\"true\"\n            alt=\"\"\n          />\n        }\n      </div>\n      <table className=\"ticket__table\">\n        <thead>\n          <tr>\n            <th className=\"text-uppercase color-gray\">{from.destination} - {from.origin}</th>\n            <th className=\"text-uppercase color-gray\">В пути</th>\n            <th className=\"text-uppercase color-gray\">{getNumberOfTransfers(from.stops)}</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr>\n            <td className=\"font-weight-600\">{timeConvert(Date.parse(from.date), from.duration * 60 * 1000)}</td>\n            <td className=\"font-weight-600\">{durationConvert(from.duration)}</td>\n            <td className=\"font-weight-600\">{getTransfers(from.stops)}</td>\n          </tr>\n        </tbody>\n      </table>\n      <table className=\"ticket__table\">\n        <thead>\n          <tr>\n            <th className=\"text-uppercase color-gray\">{to.origin} - {to.destination}</th>\n            <th className=\"text-uppercase color-gray\">В пути</th>\n            <th className=\"text-uppercase color-gray\">{getNumberOfTransfers(to.stops)}</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr>\n            <td className=\"font-weight-600\">{timeConvert(Date.parse(to.date), to.duration * 60 * 1000)}</td>\n            <td className=\"font-weight-600\">{durationConvert(to.duration)}</td>\n            <td className=\"font-weight-600\">{getTransfers(to.stops)}</td>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","import React from 'react';\n\nimport './TicketsMessageTemplate.css';\n\ninterface IProps {\n  text: string;\n  buttonText: string;\n  onClick: () => void;\n}\n\nexport const TicketsMessageTemplate: React.FC<IProps> = ({ text, buttonText, onClick }) => {\n  const onClickHandler = () => {\n    onClick();\n  };\n\n  return (\n    <div className=\"tickets-message-template card\">\n      <p className=\"tickets-message-template__text\">{text}</p>\n      <button\n        className=\"tickets-message-template__button text-uppercase font-weight-600\"\n        type=\"button\"\n        onClick={onClickHandler}\n      >\n        {buttonText}\n      </button>\n    </div>\n  );\n};\n","import React from 'react';\n\nimport { FilterWrapper } from '../../molecules';\nimport { Checkbox, ICheckbox } from '../../atoms';\nimport { StopFilters } from '../../../constants';\n\ninterface IFilterStops {\n  checkboxes: ICheckbox[];\n}\n\ntype IProps = IFilterStops & {\n  onChangeStops: (value: StopFilters) => void;\n};\n\nexport const FilterStops: React.FC<IProps> = ({ checkboxes, onChangeStops }) => {\n  const onChangeHandler = (value: StopFilters) => {\n    onChangeStops(value);\n  };\n\n  return (\n    <FilterWrapper title=\"Количество пересадок\">\n      {\n        checkboxes.map(({ label, checked, value, disabled }) => (\n          <Checkbox\n            key={value}\n            value={value}\n            label={label}\n            checked={checked}\n            disabled={disabled}\n            onChange={onChangeHandler}\n          />\n        ))\n      }\n    </FilterWrapper>\n  );\n};\n","import React from 'react';\n\nimport './FilterWrapper.css';\n\ninterface IProps {\n  title: string;\n  children: any;\n}\n\nexport const FilterWrapper: React.FC<IProps> = ({ title, children }) => {\n  return (\n    <fieldset className=\"filter-wrapper\">\n      <legend className=\"filter-wrapper__legend text-uppercase font-weight-600\">{title}</legend> \n      {children}\n    </fieldset>\n  );\n};\n","import React from 'react';\n\nimport './SwitchTicketTypes.css';\nimport { SwitchButton, ISwitchButton } from '../../atoms';\nimport { SwitchWrapper } from '../../molecules';\nimport { TypeFilters } from '../../../constants';\n\ninterface ISwitchTicketTypes {\n  switchButtons: ISwitchButton[];\n}\n\ntype IProps = ISwitchTicketTypes & {\n  onChangeType: (value: TypeFilters) => void;\n};\n\nexport const SwitchTicketTypes: React.FC<IProps> = ({ switchButtons, onChangeType }) => {\n  const onChangeHandler = (value: TypeFilters) => {\n    onChangeType(value);\n  };\n\n  return (\n    <SwitchWrapper a11yLegend=\"Количество пересадок\">\n      <div className=\"switch-ticket-types\">\n        {\n          switchButtons.map(({ label, checked, value, name, disabled }) => (\n            <SwitchButton\n              key={value}\n              name={name}\n              value={value}\n              label={label}\n              checked={checked}\n              disabled={disabled}\n              onChange={onChangeHandler}\n            />\n          ))\n        }\n      </div>\n    </SwitchWrapper>\n  );\n};\n","import React from 'react';\n\ninterface IProps {\n  a11yLegend: string;\n  children: any;\n}\n\nexport const SwitchWrapper: React.FC<IProps> = ({ a11yLegend, children }) => {\n  return (\n    <fieldset className=\"switch-wrapper\">\n      <legend className=\"visually-hidden\">{a11yLegend}</legend>\n      {children}\n    </fieldset>\n  );\n};\n","import React from 'react';\n\nimport './TicketsList.css';\nimport { ITicket, Ticket, Loader, TicketsMessageTemplate } from '../../atoms';\n\nexport interface IProps {\n  allTicketsLength: number;\n  tickets: ITicket[];\n  isLoading: boolean;\n  isError: boolean;\n  onClearFilters: () => void;\n  onRepeatSearch: () => void;\n}\n\nconst getTicketsView = (\n  { tickets, isLoading, isError, allTicketsLength, onClearFilters, onRepeatSearch }: IProps\n) => {\n  const onClearFiltersHandler = () => {\n    onClearFilters();\n  };\n\n  const onRepeatSearchHandler = () => {\n    onRepeatSearch();\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"tickets-list tickets-list--loading card\">\n        <Loader />\n      </div>\n    );\n  }\n\n  if (!tickets.length) {\n    return (\n      <TicketsMessageTemplate\n        text={`Мы нашли ${allTicketsLength} рейсов, но ни один не соответствует заданным фильтрам.`}\n        buttonText=\"Расслабить фильтры\"\n        onClick={onClearFiltersHandler}\n      />\n    );\n  }\n\n  if (isError) {\n    return (\n      <TicketsMessageTemplate\n        text=\"Произошла ошибка при запросе на сервер, пожалуйста повторите поиск\"\n        buttonText=\"Повторить поиск\"\n        onClick={onRepeatSearchHandler}\n      />\n    );\n  }\n\n  return (\n    <ul className=\"tickets-list\">\n      {\n        tickets.slice(0, 5).map(({ price, carrier, segments }, index) => (\n          <li className=\"tickets-list__item\" key={`${index}-${carrier}`}>\n            <Ticket\n              price={price}\n              carrier={carrier}\n              segments={segments}\n            />\n          </li>\n        ))\n      }\n    </ul>\n  );\n};\n\nexport const TicketsList: React.FC<IProps> = (props) => {\n  return getTicketsView(props);\n};\n","import axios from 'axios';\nimport axiosRetry from 'axios-retry';\n\nimport { ITicket } from '../components/atoms/Ticket/Ticket';\n\naxiosRetry(axios, { retries: 3 });\n\nexport const apiGetSearchId = (): Promise<{ searchId: string }> => {\n  return axios.get(`https://front-test.beta.aviasales.ru/search`)\n    .then(({ data }) => data)\n};\n\nexport const apiGetTickets = (searchId: string): Promise<{ stop: boolean, tickets: ITicket[] }> => {\n  return axios.get(`https://front-test.beta.aviasales.ru/tickets?searchId=${searchId}`)\n    .then(({ data }) => data)\n};\n","import { ICheckbox, ISwitchButton } from '../components/atoms';\n\nexport enum StopFilters {\n  All = 'all',\n  Empty = 'withoutStops',\n  One = '1stop',\n  Two = '2stops',\n  Three = '3stops',\n}\n\nexport enum TypeFilters {\n  Cheap = 'cheap',\n  Fast = 'fast',\n}\n\nexport const stopFilters: ICheckbox[] = [\n  {\n    label: 'Все',\n    value: StopFilters.All,\n    checked: true,\n  },\n  {\n    label: 'Без пересадок',\n    value: StopFilters.Empty,\n    checked: true,\n  },\n  {\n    label: '1 пересадка',\n    value: StopFilters.One,\n    checked: true,\n  },\n  {\n    label: '2 пересадки',\n    value: StopFilters.Two,\n    checked: true,\n  },\n  {\n    label: '3 пересадки',\n    value: StopFilters.Three,\n    checked: true,\n  },\n];\n\nexport const typeFilters: ISwitchButton[] = [\n  {\n    label: 'Самый дешевый',\n    value: TypeFilters.Cheap,\n    name: 'type',\n    checked: true,\n  },\n  {\n    label: 'Самый быстрый',\n    value: TypeFilters.Fast,\n    name: 'type',\n    checked: false,\n  },\n];\n","import React, { Component } from 'react'\n\nimport './App.css';\nimport logo from '../../../assets/logo.svg';\nimport { ICheckbox, ISwitchButton, ITicket } from '../../atoms';\nimport { FilterStops, SwitchTicketTypes, TicketsList } from '../../molecules';\nimport { apiGetSearchId, apiGetTickets } from '../../../api';\nimport { stopFilters, typeFilters, StopFilters, TypeFilters } from '../../../constants';\nimport { priceSort, durationSort, stopsSort } from '../../../helpers';\n\ninterface IAppState {\n  searchId: string;\n  isTicketsLoading: boolean;\n  isTicketsError: boolean;\n  stopFilters: ICheckbox[];\n  typeFilters: ISwitchButton[];\n  tickets: ITicket[];\n  filteredTickets: ITicket[];\n}\n\ninterface IProps {}\n\nexport default class App extends Component<IProps, IAppState> {\n  constructor(props: Readonly<IProps>) {\n    super(props);\n\n    this.state = {\n      searchId: '',\n      isTicketsLoading: false,\n      isTicketsError: false,\n      stopFilters,\n      typeFilters,\n      tickets: [],\n      filteredTickets: [],\n    };\n  }\n\n  componentDidMount() {\n    this.getTicketsWithoutSearchId();\n  }\n\n  getTicketsWithoutSearchId() {\n    this.setState({\n      isTicketsLoading: true,\n    });\n\n    apiGetSearchId()\n      .then(({ searchId }) => {\n        this.setState({\n          searchId,\n        });\n\n        this.getTicketsWithSearchId(searchId);\n      })\n      .catch((error) => {\n        this.setTicketsLoadError(error);\n      });\n  }\n\n  getTicketsWithSearchId(searchId: string) {\n    apiGetTickets(searchId)\n      .then(({ tickets, stop }) => {\n        /**\n         * Get all patches till stop is true\n         */\n        if (stop) {\n          this.setState((state) => ({\n            tickets: [...state.tickets, ...tickets],\n            isTicketsLoading: false,\n          }), () => this.updateTicketsByStopsFilter(this.state.stopFilters));\n        } else {\n          this.setState(() => ({\n            tickets: [...this.state.tickets, ...tickets],\n          }));\n\n          this.getTicketsWithSearchId(searchId);\n        }\n      })\n      .catch((error) => {\n        this.setTicketsLoadError(error);\n      });\n  }\n\n  setTicketsLoadError(error: any) {\n    console.error(error);\n\n    this.setState({\n      isTicketsError: true,\n      isTicketsLoading: false,\n    });\n  }\n  /**\n   * If all checkboxes except \"All\" are selected.\n   */\n  selectDeselectAllStopsFilters(stopFilters: ICheckbox[]) {\n    const allFilterIndex = stopFilters.findIndex(({ value }) => value === StopFilters.All);\n    const isImplicitSelectionOfEverything = stopFilters.every(({ checked }, index) => {\n      return checked && allFilterIndex !== index;\n    });\n\n    stopFilters[allFilterIndex].checked = isImplicitSelectionOfEverything;\n\n    this.setState({\n      stopFilters,\n    });\n  }\n\n  updateTicketsByStopsFilter(stopFilters: ICheckbox[]) {\n    let updatedTickets: ITicket[] = [];\n\n    stopFilters.forEach(({ checked, value }) => {\n      if (checked) {\n        /**\n         * If value === StopFilters.All return all tickets immediately\n         */\n        value === StopFilters.All\n          ? updatedTickets = this.state.tickets\n          : updatedTickets = [...updatedTickets, ...this.handleChangeStop(value)];\n      }\n    });\n\n    this.setState(() => ({\n      filteredTickets: updatedTickets,\n    }), () => this.updateTicketsByTypesFilter(this.state.typeFilters));\n  }\n\n  updateTicketsByTypesFilter(typesFilterData: ISwitchButton[]) {\n    typesFilterData.forEach(({ checked, value }) => {\n      if (checked) {\n        this.handleChangeType(value);\n      }\n    });\n  }\n\n  handleChangeStop(value: StopFilters): ITicket[] {\n    switch (value) {\n      case StopFilters.Empty:\n        return stopsSort(this.state.tickets, 0);\n      case StopFilters.One:\n        return stopsSort(this.state.tickets, 1);\n      case StopFilters.Two:\n        return stopsSort(this.state.tickets, 2);\n      case StopFilters.Three:\n        return stopsSort(this.state.tickets, 3);\n      default:\n        return [];\n    }\n  }\n\n  setStopFilters = (value: StopFilters) => {\n    if (value === StopFilters.All) {\n      const isAllChecked = this.state.stopFilters.every(({ checked }) => checked);\n      const updatedStopsFilterData = this.state.stopFilters.map((item) => ({ ...item, checked: !isAllChecked }));\n\n      this.setState(() => ({\n        stopFilters: updatedStopsFilterData,\n      }), () => this.updateTicketsByStopsFilter(this.state.stopFilters));\n    } else {\n      const newStopsFilterData = this.state.stopFilters.map((item) => {\n        return {\n          ...item,\n          checked: item.value === value\n            ? !item.checked\n            : item.checked,\n        };\n      });\n  \n      this.setState(() => ({\n        stopFilters: newStopsFilterData,\n      }), () => this.updateTicketsByStopsFilter(this.state.stopFilters));\n  \n      this.selectDeselectAllStopsFilters(newStopsFilterData);\n    }\n  }\n\n  handleChangeType(value: TypeFilters) {\n    switch (value) {\n      case TypeFilters.Cheap:\n        const cheapTickets = priceSort(this.state.filteredTickets);\n\n        this.setState(() => ({\n          filteredTickets: cheapTickets,\n        }));\n\n        break;\n\n      case TypeFilters.Fast:\n        const fastTickets = durationSort(this.state.filteredTickets);\n\n        this.setState(() => ({\n          filteredTickets: fastTickets,\n        }));\n\n        break;\n    \n      default:\n        break;\n    }\n  }\n\n  setTypeFilters = (value: TypeFilters) => {\n    const updatedTypeFilters = this.state.typeFilters.map((item) => {\n      return { ...item, checked: item.value === value };\n    });\n\n    this.setState(() => ({\n      typeFilters: updatedTypeFilters,\n    }), () => this.updateTicketsByTypesFilter(this.state.typeFilters));\n  }\n\n  repeatLastSearch = () => {\n    this.setState({\n      isTicketsError: false,\n      isTicketsLoading: true,\n    });\n\n    this.getTicketsWithSearchId(this.state.searchId);\n  }\n\n  clearFilters = () => {\n    this.setState((state) => ({\n      stopFilters,\n      filteredTickets: state.tickets,\n    }));\n  }\n\n  render() {\n    return (\n      <main className=\"app\">\n        <div className=\"app__header\">\n          <img src={logo} alt=\"Logo of Aviasales\"/>\n        </div>\n        <div className=\"app__content\">\n          <aside className=\"app__aside card\">\n            <FilterStops\n              checkboxes={this.state.stopFilters}\n              onChangeStops={this.setStopFilters}\n            />\n          </aside>\n          <section className=\"app__section\">\n            <SwitchTicketTypes\n              switchButtons={this.state.typeFilters}\n              onChangeType={this.setTypeFilters}\n            />\n            <TicketsList\n              allTicketsLength={this.state.tickets.length}\n              isLoading={this.state.isTicketsLoading}\n              isError={this.state.isTicketsError}\n              tickets={this.state.filteredTickets}\n              onClearFilters={this.clearFilters}\n              onRepeatSearch={this.repeatLastSearch}\n            />\n          </section>\n        </div>\n      </main>\n    );\n  };\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport App from './components/organisms/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}